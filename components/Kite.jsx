/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
License: https://help.3dexport.com/item/basic-and-extended-license-usage-examples/
*/
import { useGLTF } from "@react-three/drei";
import { forwardRef, useEffect } from "react";
import { animated, useSpring } from "react-spring/three";
import { Vector3 } from "three";
import { degToRad, radToDeg } from "three/src/math/MathUtils";
const Kite = forwardRef((props, ref) => {
  const { nodes, materials } = useGLTF("/kiteV2.glb");

  const podPositionVector = new Vector3();
  podPositionVector.fromArray(props.podPosition);

  const springProps = useSpring({
    from: { kiteAttitude: props.prevKiteAttitude },
    to: { kiteAttitude: props.kiteAttitude },
    precision: 0.00001,
    onProps: () => {
      console.log(
        "useSpring was triggered",
        props.kiteAttitude.radius,
        radToDeg(props.kiteAttitude.elevation),
        radToDeg(props.kiteAttitude.azimuth)
      );
    },
    // immediate: true,
    // config: { tension: 40, friction: 10 },
  });
  console.log("Spring props", springProps);

  useEffect(() => {
    if (ref.current) {
      ref.current.lookAt(podPositionVector);
      ref.current.rotation.z =
        degToRad(props.windParameters.direction_deg) + Math.PI / 2;
    }
  }, [props.podPosition]);

  return (
    <animated.group
      // ref={ref}
      position={springProps.kiteAttitude.to((s) => {
        const { radius, azimuth, elevation } = s;
        const newPosition = new Vector3()
          .setFromSphericalCoords(
            radius,
            Math.PI / 2 - elevation,
            -azimuth + Math.PI / 2
          )
          .add(podPositionVector);
        return newPosition.toArray();
      })}
      ref={ref}
    >
      <axesHelper scale={5} />

      <group {...props} dispose={null}>
        <group name="kiteV2" rotation={[-Math.PI / 2, 0, 0]}>
          <group
            name="Cat_Lowres"
            position={[-12.692, 24.393, -99.942]}
            rotation={[0.787, 0.615, 0.227]}
          />
          <group name="Line" rotation={[1.629, 0.089, 1.84]}>
            <mesh
              name="Line_1"
              castShadow
              receiveShadow
              geometry={nodes.Line_1.geometry}
              material={materials["8-_4-_lambert17SG"]}
            />
            <mesh
              name="Line_2"
              castShadow
              receiveShadow
              geometry={nodes.Line_2.geometry}
              material={materials["9-_4-_lambert17SG"]}
            />
            <mesh
              name="Line_3"
              castShadow
              receiveShadow
              geometry={nodes.Line_3.geometry}
              material={materials["12-_6-_lambert7SG"]}
            />
            <mesh
              name="Line_4"
              castShadow
              receiveShadow
              geometry={nodes.Line_4.geometry}
              material={materials["13-_6-_lambert7SG"]}
            />
            <mesh
              name="Line_5"
              castShadow
              receiveShadow
              geometry={nodes.Line_5.geometry}
              material={materials["10-_5-_lambert19SG"]}
            />
            <mesh
              name="Line_6"
              castShadow
              receiveShadow
              geometry={nodes.Line_6.geometry}
              material={materials["11-_5-_lambert19SG"]}
            />
            <mesh
              name="Line_7"
              castShadow
              receiveShadow
              geometry={nodes.Line_7.geometry}
              material={materials["6-_3-_initialShadingG"]}
            />
            <mesh
              name="Line_8"
              castShadow
              receiveShadow
              geometry={nodes.Line_8.geometry}
              material={materials["7-_3-_initialShadingG"]}
            />
            <mesh
              name="Line_9"
              castShadow
              receiveShadow
              geometry={nodes.Line_9.geometry}
              material={materials.Material}
            />
            <mesh
              name="Line_10"
              castShadow
              receiveShadow
              geometry={nodes.Line_10.geometry}
              material={materials["Material.001"]}
            />
            <mesh
              name="Line_11"
              castShadow
              receiveShadow
              geometry={nodes.Line_11.geometry}
              material={materials["0-_0-_VRayMtl4SG"]}
            />
            <mesh
              name="Line_12"
              castShadow
              receiveShadow
              geometry={nodes.Line_12.geometry}
              material={materials["1-_0-_VRayMtl4SG"]}
            />
            <mesh
              name="Line_13"
              castShadow
              receiveShadow
              geometry={nodes.Line_13.geometry}
              material={materials.equipment}
            />
          </group>
          <group
            name="Texture_Group"
            position={[-12.692, 24.393, -99.942]}
            rotation={[0.787, 0.615, 0.227]}
          />
        </group>
      </group>
    </animated.group>
  );
});

useGLTF.preload("/kiteV2.glb");

Kite.displayName = "Kite";

export default Kite;
